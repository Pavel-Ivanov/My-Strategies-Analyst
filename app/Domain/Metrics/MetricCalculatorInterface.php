<?php

namespace App\Domain\Metrics;

use App\Models\Strategy;
use Carbon\CarbonInterface;

/**
 * Интерфейс контрактов для всех калькуляторов метрик в домене приложения.
 *
 * Назначение
 * - Определяет минимальный набор методов, который должен реализовать любой
 *   калькулятор метрик (APR, комиссионные, доходность и т.д.).
 * - Гарантирует единообразный способ вычисления значений метрик для конкретной
 *   инвестиционной стратегии на указанную дату/время и возврата результата в
 *   стандартизированном виде.
 *
 * Входящие (задействованные) классы и их роль
 * - App\Models\Strategy (Strategy): доменная модель стратегии, для которой
 *   производится расчёт. Содержит бизнес‑данные и связи, необходимые для
 *   вычисления конкретной метрики. Реализации калькуляторов должны ожидать,
 *   что объект стратегии уже загружен и при необходимости дополнительно
 *   подгружать связанные данные через жадную загрузку, чтобы избегать N+1.
 *
 * - Carbon\CarbonInterface: контракт даты/времени, указывающий «на когда»
 *   требуется расчёт. Это позволяет вычислять исторические значения метрик,
 *   а не только «на сейчас».
 *
 * - App\Domain\Metrics\MetricResult: тип возвращаемого результата расчёта.
 *   Инкапсулирует:
 *     • key — строковый уникальный ключ метрики (напр., "apr");
 *     • value — числовое значение (float) или null, если вычислить невозможно;
 *     • unit — единица измерения (напр., "%", "USD", "bps");
 *     • displayName — человекочитаемое имя для UI;
 *     • meta — произвольные дополнительные данные (массив) для UI/отладки.
 *
 * Конвенции
 * - Ключ метрики (key) должен быть стабильным, нижним регистром, без пробелов
 *   (например: "apr", "fees_collected").
 * - Единицы измерения возвращаются кратко и однозначно ("%", "USD", "bps").
 * - Если значение вычислить невозможно (нет данных, ошибка входных данных и т.п.),
 *   вернуть MetricResult с value = null и при необходимости подробности в meta.
 * - Реализации должны быть идемпотентны и чисты относительно переданных
 *   аргументов: не изменять состояние модели/БД и не иметь побочных эффектов.
 */
interface MetricCalculatorInterface
{
    /**
     * Возвращает уникальный ключ метрики, например: "apr".
     *
     * Ключ используется реестром метрик, кэшированием и UI для однозначной
     * идентификации метрики.
     */
    public function key(): string;

    /**
     * Вычисляет значение метрики для заданной стратегии на указанное время.
     *
     * Ожидания:
     * - Не должно модифицировать состояние (только чтение).
     * - При отсутствии достаточных данных можно вернуть value = null.
     * - Тяжёлые операции рекомендуется оптимизировать кэшированием на уровне
     *   вызвавшего кода/сервиса, если это принято в проекте.
     *
     * @param  Strategy  $strategy  Модель стратегии, для которой считать метрику.
     * @param  CarbonInterface  $at  Точка времени, на которую нужен расчёт.
     * @return MetricResult Результат расчёта в стандартизированном виде.
     */
    public function calculate(Strategy $strategy, CarbonInterface $at): MetricResult;

    /**
     * Передаёт калькулятору конфигурацию/параметры вычисления.
     *
     * Примеры:
     * - Периоды агрегирования ("window" => "30d").
     * - Внешние коэффициенты, источники данных и т.п.
     *
     * Реализация должна документировать поддерживаемые ключи и значения.
     * Допустимо вызывать метод до calculate() неоднократно.
     *
     * @param  array<string,mixed>  $config  Ассоциативный массив настроек.
     */
    public function setConfig(array $config): void;

    /**
     * Краткое человекочитаемое описание того, что рассчитывает калькулятор.
     *
     * Пример: "Среднегодовая доходность (APR) за последние 30 дней".
     */
    public function getDescription(): string;

    /**
     * Возвращает единицу измерения значения метрики.
     *
     * Примеры: "%", "USD", "bps". Может быть пустой строкой, если метрика
     * безразмерная, однако рекомендуется указывать единицу явно.
     */
    public function getUnit(): string;
}
